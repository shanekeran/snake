require 'ruby2d'

set background: 'black'
set title: "Shane's Snake game"
set fps_cap: 5

GRID_SIZE = 20

class Snake
    def initialize
        @positions = [[0,2],[1,2],[2,2],[3,2]] #Starting point
        @direction = 'right' #Starting direction
    end

    def reset #Restarts the game
        initialize
    end

    def draw
        #Creates each sqaure snake occupies
        @positions.each do |position|
         Square.new(
             x: position[0] * GRID_SIZE,
             y: position[1] * GRID_SIZE,
             size: GRID_SIZE-2, #-2 so there is a border between squares
             color: 'green'
         )
        end
    end

    def snake_head
        @positions.last #returns the position of the snakes head
    end


    def move
        if @positions.length > 3
            @positions.shift # removes butt end of the snake
            case @direction
            when 'down'
                @positions.push([snake_head[0],snake_head[1] + 1]) #Adds new square to the end to create movement
            when 'up'
                @positions.push([snake_head[0],snake_head[1] - 1])
            when 'left'
                @positions.push([snake_head[0] - 1,snake_head[1]])
            when 'right'
                @positions.push([snake_head[0] + 1,snake_head[1]])
            end
        end
    end

    def direction(to)
        @direction = to #method to set snakes current direction
    end

    def position
        @positions
    end

    def grow
        case @direction #Snake grows 1 square in the direction it's travelling
        when 'down'
            @positions.append([snake_head[0],snake_head[1] + 1])
        when 'up'
            @positions.append([snake_head[0],snake_head[1] - 1])
        when 'left'
            @positions.append([snake_head[0] - 1,snake_head[1]])
        when 'right'
            @positions.append([snake_head[0] + 1,snake_head[1]])
        end
    end

end

class Apple
    def initialize
        @position = [rand(20),rand(20)] #Starting point
    end

    def draw
        #Creates apple sqaure
        Square.new(
            x: @position[0] * GRID_SIZE,
            y: @position[1] * GRID_SIZE,
            size: GRID_SIZE-3,
            color: 'red'
        )
    end

    def current_position
        @position
    end

    def new_position
        @position = [rand(31),rand(22)] #Sets new position for the apple when eaten
    end
end

class Score
    def initialize #Player starts on 1 point
        @points = 1
    end

    def draw #Places score in window
        Text.new(
        "Score: #{@points}",
            x: 530, y: 2, # Text position (top right)
            size: 20,
        )
    end

    def increment #Increments score by 1
        @points +=1
    end

    def reset
        initialize
    end

end

snake = Snake.new #Create the snake
snake.draw #Sets the snakes size, position, direction etc

apple = Apple.new
apple.draw

counter = Score.new #Creates the Score counter
counter.draw


update do #Actions carried out for every frame
    clear
    snake.move
    snake.draw
    apple.draw
    counter.draw
    #Checks if snake is out of bounds
    if snake.snake_head[0] > 31 || snake.snake_head[0] < 0
        snake.reset
        apple.new_position
        counter.reset
    elsif snake.snake_head[1] > 22 || snake.snake_head[1] < 0
        snake.reset
        apple.new_position
        counter.reset
    end
    #Checks if snake touches itself
    if snake.position.uniq.length < snake.position.length #checks for duplicate positions
        snake.reset
        apple.new_position
        counter.reset
    end
    #Snake eats Apple
    if snake.position.include? (apple.current_position)
        apple.new_position
        snake.grow
        counter.increment
    end
    #Snake movement speed increase
    if snake.position.length > 8
        snake.move
    end
end


on :key_down do |event| # When a key is pressed do
    if ['left', 'right','up','down'].include?(event.key) # Is the key a valid direction?
        snake.direction(event.key) #Set the direction to the corresponding key
    end
end

show #Opens ruby2d window